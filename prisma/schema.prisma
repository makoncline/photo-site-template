// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id          String       @id @default(cuid())
  title       String
  published   Boolean      @default(false)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  images      Image[]
  user        User         @relation(fields: [userId], references: [id])
  imageOrders ImageOrder[]
}

model Image {
  id         String      @id @default(cuid())
  key        String
  published  Boolean     @default(false)
  deleted    DateTime?
  userId     String
  postId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  post       Post        @relation(fields: [postId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  imageOrder ImageOrder?
}

model ImageOrder {
  id      String @id @default(cuid())
  order   Int
  postId  String
  post    Post   @relation(fields: [postId], references: [id])
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  images   Image[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
